# inherutance
package shapeinheritanceexample;
abstract class Shape {
// Abstract method to calculate the area
public abstract double calculateArea();
}

// Circle class
class Circle extends Shape {
private double radius;
// Constructor to initialize radius
public Circle(double radius) {
this.radius = radius;
}

// Implementation of calculateArea for Circle
@Override
public double calculateArea() {
return Math.PI * radius * radius;
}
}
class Rectangle extends Shape {
private double length, width;
// Constructor to initialize length and width
public Rectangle(double length, double width) {
this.length = length;
this.width = width;
}

// Implementation of calculateArea for Rectangle
@Override
public double calculateArea() {
return length * width;
}
}
class Square extends Shape {
private double side;
public Square(double side) {
this.side = side;
}
@Override
public double calculateArea() {
return side * side;
}
}
class Triangle extends Shape {
private double base, height;
public Triangle(double base, double height) {
this.base = base;
this.height = height;
}
@Override
public double calculateArea() {
return 0.5 * base * height;
}
}
public class ShapeInheritanceExample {
    public static void main(String[] args) {
        
        Shape circle = new Circle(5);
Shape rectangle = new Rectangle(4, 6);
Shape square = new Square(4);
Shape triangle = new Triangle(3, 5);


System.out.println("Circle Area:"+ circle.calculateArea());
System.out.println("Rectangle Area: " + rectangle.calculateArea());
System.out.println("Square Area:" + square.calculateArea());
System.out.println("Triangle Area:" + triangle.calculateArea());
        
        
    }
    
}

Circle Area:78.53981633974483
Rectangle Area: 24.0
Square Area:16.0
Triangle Area:7.5
BUILD SUCCESSFUL (total time: 1 second)

